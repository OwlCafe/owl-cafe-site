(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function(root, factory) {

	if (root === null) {
		throw new Error('Google-maps package can be used only in browser');
	}

	if (typeof define === 'function' && define.amd) {
		define(factory);
	} else if (typeof exports === 'object') {
		module.exports = factory();
	} else {
		root.GoogleMapsLoader = factory();
	}

})(typeof window !== 'undefined' ? window : null, function() {


	'use strict';


	var googleVersion = '3.18';

	var script = null;

	var google = null;

	var loading = false;

	var callbacks = [];

	var onLoadEvents = [];

	var originalCreateLoaderMethod = null;


	var GoogleMapsLoader = {};


	GoogleMapsLoader.URL = 'https://maps.googleapis.com/maps/api/js';

	GoogleMapsLoader.KEY = null;

	GoogleMapsLoader.LIBRARIES = [];

	GoogleMapsLoader.CLIENT = null;

	GoogleMapsLoader.CHANNEL = null;

	GoogleMapsLoader.LANGUAGE = null;

	GoogleMapsLoader.REGION = null;

	GoogleMapsLoader.VERSION = googleVersion;

	GoogleMapsLoader.WINDOW_CALLBACK_NAME = '__google_maps_api_provider_initializator__';


	GoogleMapsLoader._googleMockApiObject = {};


	GoogleMapsLoader.load = function(fn) {
		if (google === null) {
			if (loading === true) {
				if (fn) {
					callbacks.push(fn);
				}
			} else {
				loading = true;

				window[GoogleMapsLoader.WINDOW_CALLBACK_NAME] = function() {
					ready(fn);
				};

				GoogleMapsLoader.createLoader();
			}
		} else if (fn) {
			fn(google);
		}
	};


	GoogleMapsLoader.createLoader = function() {
		script = document.createElement('script');
		script.type = 'text/javascript';
		script.src = GoogleMapsLoader.createUrl();

		document.body.appendChild(script);
	};


	GoogleMapsLoader.isLoaded = function() {
		return google !== null;
	};


	GoogleMapsLoader.createUrl = function() {
		var url = GoogleMapsLoader.URL;

		url += '?callback=' + GoogleMapsLoader.WINDOW_CALLBACK_NAME;

		if (GoogleMapsLoader.KEY) {
			url += '&key=' + GoogleMapsLoader.KEY;
		}

		if (GoogleMapsLoader.LIBRARIES.length > 0) {
			url += '&libraries=' + GoogleMapsLoader.LIBRARIES.join(',');
		}

		if (GoogleMapsLoader.CLIENT) {
			url += '&client=' + GoogleMapsLoader.CLIENT + '&v=' + GoogleMapsLoader.VERSION;
		}

		if (GoogleMapsLoader.CHANNEL) {
			url += '&channel=' + GoogleMapsLoader.CHANNEL;
		}

		if (GoogleMapsLoader.LANGUAGE) {
			url += '&language=' + GoogleMapsLoader.LANGUAGE;
		}

		if (GoogleMapsLoader.REGION) {
			url += '&region=' + GoogleMapsLoader.REGION;
		}

		return url;
	};


	GoogleMapsLoader.release = function(fn) {
		var release = function() {
			GoogleMapsLoader.KEY = null;
			GoogleMapsLoader.LIBRARIES = [];
			GoogleMapsLoader.CLIENT = null;
			GoogleMapsLoader.CHANNEL = null;
			GoogleMapsLoader.LANGUAGE = null;
			GoogleMapsLoader.REGION = null;
			GoogleMapsLoader.VERSION = googleVersion;

			google = null;
			loading = false;
			callbacks = [];
			onLoadEvents = [];

			if (typeof window.google !== 'undefined') {
				delete window.google;
			}

			if (typeof window[GoogleMapsLoader.WINDOW_CALLBACK_NAME] !== 'undefined') {
				delete window[GoogleMapsLoader.WINDOW_CALLBACK_NAME];
			}

			if (originalCreateLoaderMethod !== null) {
				GoogleMapsLoader.createLoader = originalCreateLoaderMethod;
				originalCreateLoaderMethod = null;
			}

			if (script !== null) {
				script.parentElement.removeChild(script);
				script = null;
			}

			if (fn) {
				fn();
			}
		};

		if (loading) {
			GoogleMapsLoader.load(function() {
				release();
			});
		} else {
			release();
		}
	};


	GoogleMapsLoader.onLoad = function(fn) {
		onLoadEvents.push(fn);
	};


	GoogleMapsLoader.makeMock = function() {
		originalCreateLoaderMethod = GoogleMapsLoader.createLoader;

		GoogleMapsLoader.createLoader = function() {
			window.google = GoogleMapsLoader._googleMockApiObject;
			window[GoogleMapsLoader.WINDOW_CALLBACK_NAME]();
		};
	};


	var ready = function(fn) {
		var i;

		loading = false;

		if (google === null) {
			google = window.google;
		}

		for (i = 0; i < onLoadEvents.length; i++) {
			onLoadEvents[i](google);
		}

		if (fn) {
			fn(google);
		}

		for (i = 0; i < callbacks.length; i++) {
			callbacks[i](google);
		}

		callbacks = [];
	};


	return GoogleMapsLoader;

});

},{}],2:[function(require,module,exports){
"use strict";

var GoogleMapsLoader = require("google-maps");

GoogleMapsLoader.KEY = "AIzaSyBguCT2SHA9nG_1HwjLNVz58Mly36yEv4M";

GoogleMapsLoader.load(function (google) {
    var map = document.querySelector("#map"),
        place = { lat: 45.5975812, lng: 9.8829403 },
        gMap = new google.maps.Map(map, {
        center: place,
        zoom: 17,
        styles: [{
            elementType: "geometry",
            stylers: [{
                color: "#ebe3cd"
            }]
        }, {
            elementType: "labels.text.fill",
            stylers: [{
                color: "#523735"
            }]
        }, {
            elementType: "labels.text.stroke",
            stylers: [{
                color: "#f5f1e6"
            }]
        }, {
            featureType: "administrative",
            elementType: "geometry.stroke",
            stylers: [{
                color: "#c9b2a6"
            }]
        }, {
            featureType: "administrative.land_parcel",
            elementType: "geometry.stroke",
            stylers: [{
                color: "#dcd2be"
            }]
        }, {
            featureType: "administrative.land_parcel",
            elementType: "labels.text.fill",
            stylers: [{
                color: "#ae9e90"
            }]
        }, {
            featureType: "landscape.natural",
            elementType: "geometry",
            stylers: [{
                color: "#dfd2ae"
            }]
        }, {
            featureType: "poi",
            elementType: "geometry",
            stylers: [{
                color: "#dfd2ae"
            }]
        }, {
            featureType: "poi",
            elementType: "labels.text.fill",
            stylers: [{
                color: "#93817c"
            }]
        }, {
            featureType: "poi.park",
            elementType: "geometry.fill",
            stylers: [{
                color: "#a5b076"
            }]
        }, {
            featureType: "poi.park",
            elementType: "labels.text.fill",
            stylers: [{
                color: "#447530"
            }]
        }, {
            featureType: "road",
            elementType: "geometry",
            stylers: [{
                color: "#f5f1e6"
            }]
        }, {
            featureType: "road.arterial",
            elementType: "geometry",
            stylers: [{
                color: "#fdfcf8"
            }]
        }, {
            featureType: "road.highway",
            elementType: "geometry",
            stylers: [{
                color: "#f8c967"
            }]
        }, {
            featureType: "road.highway",
            elementType: "geometry.stroke",
            stylers: [{
                color: "#e9bc62"
            }]
        }, {
            featureType: "road.highway.controlled_access",
            elementType: "geometry",
            stylers: [{
                color: "#e98d58"
            }]
        }, {
            featureType: "road.highway.controlled_access",
            elementType: "geometry.stroke",
            stylers: [{
                color: "#db8555"
            }]
        }, {
            featureType: "road.local",
            elementType: "labels.text.fill",
            stylers: [{
                color: "#806b63"
            }]
        }, {
            featureType: "transit.line",
            elementType: "geometry",
            stylers: [{
                color: "#dfd2ae"
            }]
        }, {
            featureType: "transit.line",
            elementType: "labels.text.fill",
            stylers: [{
                color: "#8f7d77"
            }]
        }, {
            featureType: "transit.line",
            elementType: "labels.text.stroke",
            stylers: [{
                color: "#ebe3cd"
            }]
        }, {
            featureType: "transit.station",
            elementType: "geometry",
            stylers: [{
                color: "#dfd2ae"
            }]
        }, {
            featureType: "water",
            elementType: "geometry.fill",
            stylers: [{
                color: "#b9d3c2"
            }]
        }, {
            featureType: "water",
            elementType: "labels.text.fill",
            stylers: [{
                color: "#92998d"
            }]
        }]
    }),
        infowindow = new google.maps.InfoWindow({
        content: "Crazy Owl CafÃ©"
    }),
        marker = new google.maps.Marker({
        position: place,
        map: gMap,
        title: infowindow.content
    });

    marker.addListener("click", function () {
        infowindow.open(gMap, marker);
    });
});

(function () {
    "use-strict";

    document.addEventListener("DOMContentLoaded", function () {
        var slider = document.querySelector("#slider");

        if (slider) {
            var selected = slider.querySelector(".selected") || slider.firstElementChild;
            selected.classList.add("selected");

            window.setInterval(function () {
                var selected = slider.querySelector(".selected");

                selected.classList.remove("selected");
                var next = selected.nextElementSibling || selected.parentElement.firstElementChild;
                window.setTimeout(function () {
                    next.classList.add("selected");
                }, 950);
            }, 6 * 1000);
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
        var slider = document.querySelector("#rapaci-slider");

        if (slider) {
            var next = slider.querySelector(".next"),
                previous = slider.querySelector(".previous");

            var slides = slider.querySelectorAll(".slide"),
                alignPosition = function alignPosition() {
                var visible = Math.floor(100 / parseInt(getComputedStyle(slides[0]).flexBasis));

                if (position + visible >= slides.length) {
                    previous.classList.remove("hidden");
                    next.classList.add("hidden");
                } else if (position <= 0) {
                    next.classList.remove("hidden");
                    previous.classList.add("hidden");
                    position = 0;
                } else {
                    next.classList.remove("hidden");
                    previous.classList.remove("hidden");
                }
            },
                moveSlides = function moveSlides() {
                alignPosition();

                slides.forEach(function (slide) {
                    slide.style.transform = "translateX(-" + position * 100 + "%)";
                });
            };
            var position = 0;
            alignPosition();

            next.addEventListener("click", function () {
                position += 1;
                moveSlides();
            });

            previous.addEventListener("click", function () {
                position -= 1;
                moveSlides();
            });
        }
    });
})();

},{"google-maps":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
